ewqewqewqewqedwadwadwdawdewewewedawdwadwadwadwaedadwadadwa
commented project structure:
cqrs-clean-arch/
  ├── cmd/  // Command handlers and query handlers for entry point
  │   ├── command_handlers/
  │   │   ├── order_commands.go   // Handles write operations for orders
  │   │   └── customer_commands.go   // Handles write operations for customers
  │   └── query_handlers/
  │       ├── order_queries.go   // Handles read operations for orders
  │       └── customer_queries.go   // Handles read operations for customers
  ├── internal/   // Core of the application
  │   ├── app/   // Application layer
  │   │   ├── order/   // Module for order management
  │   │   │   ├── order_service.go   // Business logic for orders
  │   │   │   ├── order_repository.go   // Data access for orders
  │   │   │   └── order_controller.go   // HTTP request handling for orders
  │   │   └── customer/   // Module for customer management
  │   │       ├── customer_service.go   // Business logic for customers
  │   │       ├── customer_repository.go   // Data access for customers
  │   │       └── customer_controller.go   // HTTP request handling for customers
  │   ├── domain/   // Domain layer for core business entities
  │   │   ├── order.go   // Defines the order domain model
  │   │   └── customer.go   // Defines the customer domain model
  │   ├── infrastructure/   // External concerns
  │   │   ├── event_store/   // Event sourcing for order and customer events
  │   │   │   ├── order_events.go   // Events related to orders
  │   │   │   └── customer_events.go   // Events related to customers
  │   │   ├── query_database/   // Data access for read operations
  │   │   │   ├── order_query_db.go   // Database access for reading orders
  │   │   │   └── customer_query_db.go   // Database access for reading customers
  │   │   ├── command_database/   // Data access for write operations
  │   │   │   ├── order_command_db.go   // Database access for writing orders
  │   │   │   └── customer_command_db.go   // Database access for writing customers
  │   │   ├── config/   // Configuration related code
  │   │   │   └── config.go   // Loads and manages application configuration
  │   │   ├── kubernetes/   // Kubernetes deployment files
  │   │   │   ├── deployment.yaml   // Kubernetes deployment configuration
  │   │   │   └── service.yaml   // Kubernetes service configuration
  │   │   └── Dockerfile   // Dockerfile for containerization
  ├── interfaces/   // Interfaces layer for interacting with the outside world
  │   ├── web/   // Web interface
  │   │   ├── routes.go   // Defines HTTP routes and handlers
  │   │   └── middleware.go   // Contains HTTP middleware functions
  ├── tests/   // Unit and integration tests
  │   ├── app/
  │   │   ├── order/
  │   │   │   ├── order_service_test.go   // Tests for order service
  │   │   │   └── order_controller_test.go   // Tests for order controller
  │   │   └── customer/
  │   │       ├── customer_service_test.go   // Tests for customer service
  │   │       └── customer_controller_test.go   // Tests for customer controller
  ├── .env   // Configuration file (e.g., for environment variables)
  ├── README.md   // Project documentation
  ├── main.go   // Main entry point for the application
  ├── go.mod   // Go module file for dependency management
  └── go.sum   // Go module checksum file

project structure without comments:
cqrs-clean-arch/
  ├── cmd/
  │   ├── command_handlers/
  │   │   ├── order_commands.go
  │   │   └── customer_commands.go
  │   └── query_handlers/
  │       ├── order_queries.go
  │       └── customer_queries.go
  ├── internal/
  │   ├── app/
  │   │   ├── order/
  │   │   │   ├── order_service.go
  │   │   │   ├── order_repository.go
  │   │   │   └── order_controller.go
  │   │   └── customer/
  │   │       ├── customer_service.go
  │   │       ├── customer_repository.go
  │   │       └── customer_controller.go
  │   ├── domain/
  │   │   ├── order.go
  │   │   └── customer.go
  │   ├── infrastructure/
  │   │   ├── event_store/
  │   │   │   ├── order_events.go
  │   │   │   └── customer_events.go
  │   │   ├── query_database/
  │   │   │   ├── order_query_db.go
  │   │   │   └── customer_query_db.go
  │   │   ├── command_database/
  │   │   │   ├── order_command_db.go
  │   │   │   └── customer_command_db.go
  │   │   ├── config/
  │   │   │   └── config.go
  │   │   ├── kubernetes/
  │   │   │   ├── deployment.yaml
  │   │   │   └── service.yaml
  │   │   └── Dockerfile
  ├── interfaces/
  │   ├── web/
  │   │   ├── routes.go
  │   │   └── middleware.go
  ├── tests/
  │   ├── app/
  │   │   ├── order/
  │   │   │   ├── order_service_test.go
  │   │   │   └── order_controller_test.go
  │   │   └── customer/
  │   │       ├── customer_service_test.go
  │   │       └── customer_controller_test.go
  ├── .env
  ├── README.md
  ├── main.go
  ├── go.mod
  └── go.sum



Based on the provided architecture on top, which adhere to a combination of CQRS (Command Query Responsibility
Segregation) and the Clean Architecture, the general flow of the system, particularly for a
"create user" (or more appropriately given the context, "create customer") operation:

Controller:

Handles HTTP (or any other protocol's) requests and transforms them into application-specific commands or queries.
For a "create customer" operation, the controller in customer_controller.go would likely take the incoming HTTP
request, validate the payload, and construct a CreateCustomerCommand (or a similar command).

Command Handlers:

Processes commands. They contain the logic for handling the different types of commands (e.g., create, update, delete).
The controller will forward the CreateCustomerCommand to the appropriate command handler in customer_commands.go.
The command handler's responsibility is to orchestrate the operation, meaning it will handle any necessary business
logic or domain validations before persisting the new customer.

Service (optional, but typical in Clean Architecture):

If there are complex business rules or operations that involve multiple aggregates/entities, the command handler
might call the customer_service.go to handle this logic.
The service might also be responsible for domain events or other side effects of the command.

Repository:

Provides an abstraction over the storage mechanism, allowing the domain or application logic to be decoupled from the
details of data persistence.
After any necessary business logic or validation, the command handler (or service) will call the customer_repository.go
to persist the new customer.

Database Interface/Package:

Contains the actual code to interact with the database.
The customer_repository.go will, in turn, invoke methods in the customer_command_db.go to actually perform the database
operations to store the new customer.
Event Store (optional, but typical in CQRS/ES architectures):

If the system uses Event Sourcing, instead of storing the current state of the customer directly, it will store the
sequence of events that led to that state.
In this case, the system might emit a CustomerCreatedEvent and store it in the event store (order_events.go or
customer_events.go). Subsequently, projections or other mechanisms are used to construct the current state from these
events when needed.

The general flow:

Controller -> CommandHandler.
CommandHandler (possibly -> Service).
Service/CommandHandler -> Repository.
Repository -> Database Interface/Package (for actual persistence).
